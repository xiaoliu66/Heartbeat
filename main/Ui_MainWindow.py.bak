# -*- coding: utf-8 -*-
import asyncio
import time

# Form implementation generated from reading ui file 'Ui_MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal, QDateTime, QDate, QTime, QTimer
from PyQt5.QtWidgets import QLineEdit

import ConnetBluetooth


# 创建一个子线程 启动连接蓝牙
class getBluetoothData(QThread):
    def run(self):
        asyncio.run(ConnetBluetooth.main())


s = 0;
class getNumber(QThread):
    # 创建一个信号，触发时传递当前时间给槽函数
    # update_data = pyqtSignal(str)

    def run(self):
        while True:
            global s
            s = ConnetBluetooth.getHeartNum();
            # print("s:", s)
            time.sleep(2)


# 创建一个子线程 实时更新页面上的数据
class UpdateViewData(QThread):
    # 创建一个信号，触发时传递当前新数据给槽函数
    update_data = pyqtSignal(str)

    def run(self):
        # 无限循环，每秒钟传递一次时间给UI
        while True:
            # data = QDateTime.currentDateTime()
            # currentTime = data.toString("yyyy-MM-dd hh:mm:ss")
            # print(currentTime)
            # self.update_data.emit(str(currentTime))
            self.update_data.emit(str(ConnetBluetooth.getHeartNum()))
            time.sleep(0.1)


class Ui_MainWindow(object):
    def __init__(self):
        self.subThread = None
        self.subThread2 = None
        self.subThread3 = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(230, 80, 271, 191))
        self.lcdNumber.setObjectName("lcdNumber")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(330, 360, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.clickButton)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(540, 150, 171, 91))
        self.label.setObjectName("label")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # self.subThread = getBluetoothData()
        # self.subThread.start()

    def clickButton(self):
        print('被点击')
        # self.lcdNumber.display(10)
        self.subThread = getBluetoothData()
        self.subThread.start()
        #
        # print("xxxxxxxxx")
        # self.subThread2 = getNumber()
        # self.subThread2.start()
        # global s;
        # while True:
        #     s += 1;
        #     self.lcdNumber.display(s)
        #     time.sleep(1)

        # 创建子线程
        self.subThread3 = UpdateViewData()
        # 将子线程中的信号与timeUpdate槽函数绑定
        self.subThread3.update_data.connect(self.updateHeartbeat)
        # 启动子线程（开始更新时间）
        self.subThread3.start()

    # 被子线程的信号触发，更新一次心跳
    def updateHeartbeat(self, data):
        self.label.setText(data)
        self.lcdNumber.display(data)

    def refresh(self):
        startDate = QDateTime.currentMSecsSinceEpoch()
        endDate = QDateTime(QDate(2020, 2, 4), QTime(0, 0, 0)).toMSecsSinceEpoch()
        interval = endDate - startDate
        if interval > 0:
            days = interval // (24 * 60 * 60 * 1000)
            hour = (interval - days * 24 * 60 * 60 * 1000) // (60 * 60 * 1000)
            min = (interval - days * 24 * 60 * 60 * 1000 - hour * 60 * 60 * 1000) // (60 * 1000)
            sec = (interval - days * 24 * 60 * 60 * 1000 - hour * 60 * 60 * 1000 - min * 60 * 1000) // 1000
            intervals = str(days) + ':' + str(hour) + ':' + str(min) + ':' + str(sec)
            self.lcd.display(intervals)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "start"))
        self.label.setText(_translate("MainWindow", "TextLabel"))




